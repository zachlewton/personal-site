"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactWaypoint = require("react-waypoint");

var _MediaLibraryCard = _interopRequireDefault(require("./MediaLibraryCard"));

var _immutable = require("immutable");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _reactWindow = require("react-window");

var _reactVirtualizedAutoSizer = _interopRequireDefault(require("react-virtualized-auto-sizer"));

var _core = require("@emotion/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const CardWrapper = props => {
  const {
    rowIndex,
    columnIndex,
    style,
    data: {
      mediaItems,
      isSelectedFile,
      onAssetClick,
      cardDraftText,
      cardWidth,
      cardHeight,
      isPrivate,
      displayURLs,
      loadDisplayURL,
      columnCount,
      gutter
    }
  } = props;
  const index = rowIndex * columnCount + columnIndex;

  if (index >= mediaItems.length) {
    return null;
  }

  const file = mediaItems[index];
  return (0, _core.jsx)("div", {
    style: _objectSpread(_objectSpread({}, style), {}, {
      left: style.left + gutter * columnIndex,
      top: style.top + gutter,
      width: style.width - gutter,
      height: style.height - gutter
    })
  }, (0, _core.jsx)(_MediaLibraryCard.default, {
    key: file.key,
    isSelected: isSelectedFile(file),
    text: file.name,
    onClick: () => onAssetClick(file),
    isDraft: file.draft,
    draftText: cardDraftText,
    width: cardWidth,
    height: cardHeight,
    margin: '0px',
    isPrivate: isPrivate,
    displayURL: displayURLs.get(file.id, file.url ? (0, _immutable.Map)({
      url: file.url
    }) : (0, _immutable.Map)()),
    loadDisplayURL: () => loadDisplayURL(file),
    type: file.type,
    isViewableImage: file.isViewableImage
  }));
};

const VirtualizedGrid = props => {
  const {
    mediaItems,
    setScrollContainerRef
  } = props;
  return (0, _core.jsx)(CardGridContainer, {
    ref: setScrollContainerRef
  }, (0, _core.jsx)(_reactVirtualizedAutoSizer.default, null, ({
    height,
    width
  }) => {
    const cardWidth = parseInt(props.cardWidth, 10);
    const cardHeight = parseInt(props.cardHeight, 10);
    const gutter = parseInt(props.cardMargin, 10);
    const columnWidth = cardWidth + gutter;
    const rowHeight = cardHeight + gutter;
    const columnCount = Math.floor(width / columnWidth);
    const rowCount = Math.ceil(mediaItems.length / columnCount);
    return (0, _core.jsx)(_reactWindow.FixedSizeGrid, {
      columnCount: columnCount,
      columnWidth: columnWidth,
      rowCount: rowCount,
      rowHeight: rowHeight,
      width: width,
      height: height,
      itemData: _objectSpread(_objectSpread({}, props), {}, {
        gutter,
        columnCount
      })
    }, CardWrapper);
  }));
};

const PaginatedGrid = ({
  setScrollContainerRef,
  mediaItems,
  isSelectedFile,
  onAssetClick,
  cardDraftText,
  cardWidth,
  cardHeight,
  cardMargin,
  isPrivate,
  displayURLs,
  loadDisplayURL,
  canLoadMore,
  onLoadMore,
  isPaginating,
  paginatingMessage
}) => {
  return (0, _core.jsx)(CardGridContainer, {
    ref: setScrollContainerRef
  }, (0, _core.jsx)(CardGrid, null, mediaItems.map(file => (0, _core.jsx)(_MediaLibraryCard.default, {
    key: file.key,
    isSelected: isSelectedFile(file),
    text: file.name,
    onClick: () => onAssetClick(file),
    isDraft: file.draft,
    draftText: cardDraftText,
    width: cardWidth,
    height: cardHeight,
    margin: cardMargin,
    isPrivate: isPrivate,
    displayURL: displayURLs.get(file.id, file.url ? (0, _immutable.Map)({
      url: file.url
    }) : (0, _immutable.Map)()),
    loadDisplayURL: () => loadDisplayURL(file),
    type: file.type,
    isViewableImage: file.isViewableImage
  })), !canLoadMore ? null : (0, _core.jsx)(_reactWaypoint.Waypoint, {
    onEnter: onLoadMore
  })), !isPaginating ? null : (0, _core.jsx)(PaginatingMessage, {
    isPrivate: isPrivate
  }, paginatingMessage));
};

const CardGridContainer = (0, _styledBase.default)("div", {
  target: "e11970yf0",
  label: "CardGridContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "1wzx962",
  styles: "overflow-y:auto;overflow-x:hidden;"
} : {
  name: "1wzx962",
  styles: "overflow-y:auto;overflow-x:hidden;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lZGlhTGlicmFyeS9NZWRpYUxpYnJhcnlDYXJkR3JpZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpSm9DIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lZGlhTGlicmFyeS9NZWRpYUxpYnJhcnlDYXJkR3JpZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgV2F5cG9pbnQgfSBmcm9tICdyZWFjdC13YXlwb2ludCc7XG5pbXBvcnQgTWVkaWFMaWJyYXJ5Q2FyZCBmcm9tICcuL01lZGlhTGlicmFyeUNhcmQnO1xuaW1wb3J0IHsgTWFwIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gJ25ldGxpZnktY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IHsgRml4ZWRTaXplR3JpZCBhcyBHcmlkIH0gZnJvbSAncmVhY3Qtd2luZG93JztcbmltcG9ydCBBdXRvU2l6ZXIgZnJvbSAncmVhY3QtdmlydHVhbGl6ZWQtYXV0by1zaXplcic7XG5cbmNvbnN0IENhcmRXcmFwcGVyID0gcHJvcHMgPT4ge1xuICBjb25zdCB7XG4gICAgcm93SW5kZXgsXG4gICAgY29sdW1uSW5kZXgsXG4gICAgc3R5bGUsXG4gICAgZGF0YToge1xuICAgICAgbWVkaWFJdGVtcyxcbiAgICAgIGlzU2VsZWN0ZWRGaWxlLFxuICAgICAgb25Bc3NldENsaWNrLFxuICAgICAgY2FyZERyYWZ0VGV4dCxcbiAgICAgIGNhcmRXaWR0aCxcbiAgICAgIGNhcmRIZWlnaHQsXG4gICAgICBpc1ByaXZhdGUsXG4gICAgICBkaXNwbGF5VVJMcyxcbiAgICAgIGxvYWREaXNwbGF5VVJMLFxuICAgICAgY29sdW1uQ291bnQsXG4gICAgICBndXR0ZXIsXG4gICAgfSxcbiAgfSA9IHByb3BzO1xuICBjb25zdCBpbmRleCA9IHJvd0luZGV4ICogY29sdW1uQ291bnQgKyBjb2x1bW5JbmRleDtcbiAgaWYgKGluZGV4ID49IG1lZGlhSXRlbXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgZmlsZSA9IG1lZGlhSXRlbXNbaW5kZXhdO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgc3R5bGU9e3tcbiAgICAgICAgLi4uc3R5bGUsXG4gICAgICAgIGxlZnQ6IHN0eWxlLmxlZnQgKyBndXR0ZXIgKiBjb2x1bW5JbmRleCxcbiAgICAgICAgdG9wOiBzdHlsZS50b3AgKyBndXR0ZXIsXG4gICAgICAgIHdpZHRoOiBzdHlsZS53aWR0aCAtIGd1dHRlcixcbiAgICAgICAgaGVpZ2h0OiBzdHlsZS5oZWlnaHQgLSBndXR0ZXIsXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxNZWRpYUxpYnJhcnlDYXJkXG4gICAgICAgIGtleT17ZmlsZS5rZXl9XG4gICAgICAgIGlzU2VsZWN0ZWQ9e2lzU2VsZWN0ZWRGaWxlKGZpbGUpfVxuICAgICAgICB0ZXh0PXtmaWxlLm5hbWV9XG4gICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQXNzZXRDbGljayhmaWxlKX1cbiAgICAgICAgaXNEcmFmdD17ZmlsZS5kcmFmdH1cbiAgICAgICAgZHJhZnRUZXh0PXtjYXJkRHJhZnRUZXh0fVxuICAgICAgICB3aWR0aD17Y2FyZFdpZHRofVxuICAgICAgICBoZWlnaHQ9e2NhcmRIZWlnaHR9XG4gICAgICAgIG1hcmdpbj17JzBweCd9XG4gICAgICAgIGlzUHJpdmF0ZT17aXNQcml2YXRlfVxuICAgICAgICBkaXNwbGF5VVJMPXtkaXNwbGF5VVJMcy5nZXQoZmlsZS5pZCwgZmlsZS51cmwgPyBNYXAoeyB1cmw6IGZpbGUudXJsIH0pIDogTWFwKCkpfVxuICAgICAgICBsb2FkRGlzcGxheVVSTD17KCkgPT4gbG9hZERpc3BsYXlVUkwoZmlsZSl9XG4gICAgICAgIHR5cGU9e2ZpbGUudHlwZX1cbiAgICAgICAgaXNWaWV3YWJsZUltYWdlPXtmaWxlLmlzVmlld2FibGVJbWFnZX1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5jb25zdCBWaXJ0dWFsaXplZEdyaWQgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHsgbWVkaWFJdGVtcywgc2V0U2Nyb2xsQ29udGFpbmVyUmVmIH0gPSBwcm9wcztcblxuICByZXR1cm4gKFxuICAgIDxDYXJkR3JpZENvbnRhaW5lciByZWY9e3NldFNjcm9sbENvbnRhaW5lclJlZn0+XG4gICAgICA8QXV0b1NpemVyPlxuICAgICAgICB7KHsgaGVpZ2h0LCB3aWR0aCB9KSA9PiB7XG4gICAgICAgICAgY29uc3QgY2FyZFdpZHRoID0gcGFyc2VJbnQocHJvcHMuY2FyZFdpZHRoLCAxMCk7XG4gICAgICAgICAgY29uc3QgY2FyZEhlaWdodCA9IHBhcnNlSW50KHByb3BzLmNhcmRIZWlnaHQsIDEwKTtcbiAgICAgICAgICBjb25zdCBndXR0ZXIgPSBwYXJzZUludChwcm9wcy5jYXJkTWFyZ2luLCAxMCk7XG4gICAgICAgICAgY29uc3QgY29sdW1uV2lkdGggPSBjYXJkV2lkdGggKyBndXR0ZXI7XG4gICAgICAgICAgY29uc3Qgcm93SGVpZ2h0ID0gY2FyZEhlaWdodCArIGd1dHRlcjtcbiAgICAgICAgICBjb25zdCBjb2x1bW5Db3VudCA9IE1hdGguZmxvb3Iod2lkdGggLyBjb2x1bW5XaWR0aCk7XG4gICAgICAgICAgY29uc3Qgcm93Q291bnQgPSBNYXRoLmNlaWwobWVkaWFJdGVtcy5sZW5ndGggLyBjb2x1bW5Db3VudCk7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxHcmlkXG4gICAgICAgICAgICAgIGNvbHVtbkNvdW50PXtjb2x1bW5Db3VudH1cbiAgICAgICAgICAgICAgY29sdW1uV2lkdGg9e2NvbHVtbldpZHRofVxuICAgICAgICAgICAgICByb3dDb3VudD17cm93Q291bnR9XG4gICAgICAgICAgICAgIHJvd0hlaWdodD17cm93SGVpZ2h0fVxuICAgICAgICAgICAgICB3aWR0aD17d2lkdGh9XG4gICAgICAgICAgICAgIGhlaWdodD17aGVpZ2h0fVxuICAgICAgICAgICAgICBpdGVtRGF0YT17eyAuLi5wcm9wcywgZ3V0dGVyLCBjb2x1bW5Db3VudCB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7Q2FyZFdyYXBwZXJ9XG4gICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgKTtcbiAgICAgICAgfX1cbiAgICAgIDwvQXV0b1NpemVyPlxuICAgIDwvQ2FyZEdyaWRDb250YWluZXI+XG4gICk7XG59O1xuXG5jb25zdCBQYWdpbmF0ZWRHcmlkID0gKHtcbiAgc2V0U2Nyb2xsQ29udGFpbmVyUmVmLFxuICBtZWRpYUl0ZW1zLFxuICBpc1NlbGVjdGVkRmlsZSxcbiAgb25Bc3NldENsaWNrLFxuICBjYXJkRHJhZnRUZXh0LFxuICBjYXJkV2lkdGgsXG4gIGNhcmRIZWlnaHQsXG4gIGNhcmRNYXJnaW4sXG4gIGlzUHJpdmF0ZSxcbiAgZGlzcGxheVVSTHMsXG4gIGxvYWREaXNwbGF5VVJMLFxuICBjYW5Mb2FkTW9yZSxcbiAgb25Mb2FkTW9yZSxcbiAgaXNQYWdpbmF0aW5nLFxuICBwYWdpbmF0aW5nTWVzc2FnZSxcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8Q2FyZEdyaWRDb250YWluZXIgcmVmPXtzZXRTY3JvbGxDb250YWluZXJSZWZ9PlxuICAgICAgPENhcmRHcmlkPlxuICAgICAgICB7bWVkaWFJdGVtcy5tYXAoZmlsZSA9PiAoXG4gICAgICAgICAgPE1lZGlhTGlicmFyeUNhcmRcbiAgICAgICAgICAgIGtleT17ZmlsZS5rZXl9XG4gICAgICAgICAgICBpc1NlbGVjdGVkPXtpc1NlbGVjdGVkRmlsZShmaWxlKX1cbiAgICAgICAgICAgIHRleHQ9e2ZpbGUubmFtZX1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQXNzZXRDbGljayhmaWxlKX1cbiAgICAgICAgICAgIGlzRHJhZnQ9e2ZpbGUuZHJhZnR9XG4gICAgICAgICAgICBkcmFmdFRleHQ9e2NhcmREcmFmdFRleHR9XG4gICAgICAgICAgICB3aWR0aD17Y2FyZFdpZHRofVxuICAgICAgICAgICAgaGVpZ2h0PXtjYXJkSGVpZ2h0fVxuICAgICAgICAgICAgbWFyZ2luPXtjYXJkTWFyZ2lufVxuICAgICAgICAgICAgaXNQcml2YXRlPXtpc1ByaXZhdGV9XG4gICAgICAgICAgICBkaXNwbGF5VVJMPXtkaXNwbGF5VVJMcy5nZXQoZmlsZS5pZCwgZmlsZS51cmwgPyBNYXAoeyB1cmw6IGZpbGUudXJsIH0pIDogTWFwKCkpfVxuICAgICAgICAgICAgbG9hZERpc3BsYXlVUkw9eygpID0+IGxvYWREaXNwbGF5VVJMKGZpbGUpfVxuICAgICAgICAgICAgdHlwZT17ZmlsZS50eXBlfVxuICAgICAgICAgICAgaXNWaWV3YWJsZUltYWdlPXtmaWxlLmlzVmlld2FibGVJbWFnZX1cbiAgICAgICAgICAvPlxuICAgICAgICApKX1cbiAgICAgICAgeyFjYW5Mb2FkTW9yZSA/IG51bGwgOiA8V2F5cG9pbnQgb25FbnRlcj17b25Mb2FkTW9yZX0gLz59XG4gICAgICA8L0NhcmRHcmlkPlxuICAgICAgeyFpc1BhZ2luYXRpbmcgPyBudWxsIDogKFxuICAgICAgICA8UGFnaW5hdGluZ01lc3NhZ2UgaXNQcml2YXRlPXtpc1ByaXZhdGV9PntwYWdpbmF0aW5nTWVzc2FnZX08L1BhZ2luYXRpbmdNZXNzYWdlPlxuICAgICAgKX1cbiAgICA8L0NhcmRHcmlkQ29udGFpbmVyPlxuICApO1xufTtcblxuY29uc3QgQ2FyZEdyaWRDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBvdmVyZmxvdy15OiBhdXRvO1xuICBvdmVyZmxvdy14OiBoaWRkZW47XG5gO1xuXG5jb25zdCBDYXJkR3JpZCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtd3JhcDogd3JhcDtcblxuICBtYXJnaW4tbGVmdDogLTEwcHg7XG4gIG1hcmdpbi1yaWdodDogLTEwcHg7XG5gO1xuXG5jb25zdCBQYWdpbmF0aW5nTWVzc2FnZSA9IHN0eWxlZC5oMWBcbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMuaXNQcml2YXRlICYmIGNvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuYDtcblxuY29uc3QgTWVkaWFMaWJyYXJ5Q2FyZEdyaWQgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHsgY2FuTG9hZE1vcmUsIGlzUGFnaW5hdGluZyB9ID0gcHJvcHM7XG4gIGlmIChjYW5Mb2FkTW9yZSB8fCBpc1BhZ2luYXRpbmcpIHtcbiAgICByZXR1cm4gPFBhZ2luYXRlZEdyaWQgey4uLnByb3BzfSAvPjtcbiAgfVxuICByZXR1cm4gPFZpcnR1YWxpemVkR3JpZCB7Li4ucHJvcHN9IC8+O1xufTtcblxuTWVkaWFMaWJyYXJ5Q2FyZEdyaWQucHJvcFR5cGVzID0ge1xuICBzZXRTY3JvbGxDb250YWluZXJSZWY6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG1lZGlhSXRlbXM6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBkaXNwbGF5VVJMOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgICBpZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAga2V5OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICBkcmFmdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgfSksXG4gICkuaXNSZXF1aXJlZCxcbiAgaXNTZWxlY3RlZEZpbGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uQXNzZXRDbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgY2FuTG9hZE1vcmU6IFByb3BUeXBlcy5ib29sLFxuICBvbkxvYWRNb3JlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBpc1BhZ2luYXRpbmc6IFByb3BUeXBlcy5ib29sLFxuICBwYWdpbmF0aW5nTWVzc2FnZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY2FyZERyYWZ0VGV4dDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBjYXJkV2lkdGg6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgY2FyZE1hcmdpbjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBsb2FkRGlzcGxheVVSTDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNQcml2YXRlOiBQcm9wVHlwZXMuYm9vbCxcbiAgZGlzcGxheVVSTHM6IFByb3BUeXBlcy5pbnN0YW5jZU9mKE1hcCkuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1lZGlhTGlicmFyeUNhcmRHcmlkO1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const CardGrid = (0, _styledBase.default)("div", {
  target: "e11970yf1",
  label: "CardGrid"
})(process.env.NODE_ENV === "production" ? {
  name: "wbkx89",
  styles: "display:flex;flex-wrap:wrap;margin-left:-10px;margin-right:-10px;"
} : {
  name: "wbkx89",
  styles: "display:flex;flex-wrap:wrap;margin-left:-10px;margin-right:-10px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lZGlhTGlicmFyeS9NZWRpYUxpYnJhcnlDYXJkR3JpZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzSjJCIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lZGlhTGlicmFyeS9NZWRpYUxpYnJhcnlDYXJkR3JpZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgV2F5cG9pbnQgfSBmcm9tICdyZWFjdC13YXlwb2ludCc7XG5pbXBvcnQgTWVkaWFMaWJyYXJ5Q2FyZCBmcm9tICcuL01lZGlhTGlicmFyeUNhcmQnO1xuaW1wb3J0IHsgTWFwIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gJ25ldGxpZnktY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IHsgRml4ZWRTaXplR3JpZCBhcyBHcmlkIH0gZnJvbSAncmVhY3Qtd2luZG93JztcbmltcG9ydCBBdXRvU2l6ZXIgZnJvbSAncmVhY3QtdmlydHVhbGl6ZWQtYXV0by1zaXplcic7XG5cbmNvbnN0IENhcmRXcmFwcGVyID0gcHJvcHMgPT4ge1xuICBjb25zdCB7XG4gICAgcm93SW5kZXgsXG4gICAgY29sdW1uSW5kZXgsXG4gICAgc3R5bGUsXG4gICAgZGF0YToge1xuICAgICAgbWVkaWFJdGVtcyxcbiAgICAgIGlzU2VsZWN0ZWRGaWxlLFxuICAgICAgb25Bc3NldENsaWNrLFxuICAgICAgY2FyZERyYWZ0VGV4dCxcbiAgICAgIGNhcmRXaWR0aCxcbiAgICAgIGNhcmRIZWlnaHQsXG4gICAgICBpc1ByaXZhdGUsXG4gICAgICBkaXNwbGF5VVJMcyxcbiAgICAgIGxvYWREaXNwbGF5VVJMLFxuICAgICAgY29sdW1uQ291bnQsXG4gICAgICBndXR0ZXIsXG4gICAgfSxcbiAgfSA9IHByb3BzO1xuICBjb25zdCBpbmRleCA9IHJvd0luZGV4ICogY29sdW1uQ291bnQgKyBjb2x1bW5JbmRleDtcbiAgaWYgKGluZGV4ID49IG1lZGlhSXRlbXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgZmlsZSA9IG1lZGlhSXRlbXNbaW5kZXhdO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgc3R5bGU9e3tcbiAgICAgICAgLi4uc3R5bGUsXG4gICAgICAgIGxlZnQ6IHN0eWxlLmxlZnQgKyBndXR0ZXIgKiBjb2x1bW5JbmRleCxcbiAgICAgICAgdG9wOiBzdHlsZS50b3AgKyBndXR0ZXIsXG4gICAgICAgIHdpZHRoOiBzdHlsZS53aWR0aCAtIGd1dHRlcixcbiAgICAgICAgaGVpZ2h0OiBzdHlsZS5oZWlnaHQgLSBndXR0ZXIsXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxNZWRpYUxpYnJhcnlDYXJkXG4gICAgICAgIGtleT17ZmlsZS5rZXl9XG4gICAgICAgIGlzU2VsZWN0ZWQ9e2lzU2VsZWN0ZWRGaWxlKGZpbGUpfVxuICAgICAgICB0ZXh0PXtmaWxlLm5hbWV9XG4gICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQXNzZXRDbGljayhmaWxlKX1cbiAgICAgICAgaXNEcmFmdD17ZmlsZS5kcmFmdH1cbiAgICAgICAgZHJhZnRUZXh0PXtjYXJkRHJhZnRUZXh0fVxuICAgICAgICB3aWR0aD17Y2FyZFdpZHRofVxuICAgICAgICBoZWlnaHQ9e2NhcmRIZWlnaHR9XG4gICAgICAgIG1hcmdpbj17JzBweCd9XG4gICAgICAgIGlzUHJpdmF0ZT17aXNQcml2YXRlfVxuICAgICAgICBkaXNwbGF5VVJMPXtkaXNwbGF5VVJMcy5nZXQoZmlsZS5pZCwgZmlsZS51cmwgPyBNYXAoeyB1cmw6IGZpbGUudXJsIH0pIDogTWFwKCkpfVxuICAgICAgICBsb2FkRGlzcGxheVVSTD17KCkgPT4gbG9hZERpc3BsYXlVUkwoZmlsZSl9XG4gICAgICAgIHR5cGU9e2ZpbGUudHlwZX1cbiAgICAgICAgaXNWaWV3YWJsZUltYWdlPXtmaWxlLmlzVmlld2FibGVJbWFnZX1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5jb25zdCBWaXJ0dWFsaXplZEdyaWQgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHsgbWVkaWFJdGVtcywgc2V0U2Nyb2xsQ29udGFpbmVyUmVmIH0gPSBwcm9wcztcblxuICByZXR1cm4gKFxuICAgIDxDYXJkR3JpZENvbnRhaW5lciByZWY9e3NldFNjcm9sbENvbnRhaW5lclJlZn0+XG4gICAgICA8QXV0b1NpemVyPlxuICAgICAgICB7KHsgaGVpZ2h0LCB3aWR0aCB9KSA9PiB7XG4gICAgICAgICAgY29uc3QgY2FyZFdpZHRoID0gcGFyc2VJbnQocHJvcHMuY2FyZFdpZHRoLCAxMCk7XG4gICAgICAgICAgY29uc3QgY2FyZEhlaWdodCA9IHBhcnNlSW50KHByb3BzLmNhcmRIZWlnaHQsIDEwKTtcbiAgICAgICAgICBjb25zdCBndXR0ZXIgPSBwYXJzZUludChwcm9wcy5jYXJkTWFyZ2luLCAxMCk7XG4gICAgICAgICAgY29uc3QgY29sdW1uV2lkdGggPSBjYXJkV2lkdGggKyBndXR0ZXI7XG4gICAgICAgICAgY29uc3Qgcm93SGVpZ2h0ID0gY2FyZEhlaWdodCArIGd1dHRlcjtcbiAgICAgICAgICBjb25zdCBjb2x1bW5Db3VudCA9IE1hdGguZmxvb3Iod2lkdGggLyBjb2x1bW5XaWR0aCk7XG4gICAgICAgICAgY29uc3Qgcm93Q291bnQgPSBNYXRoLmNlaWwobWVkaWFJdGVtcy5sZW5ndGggLyBjb2x1bW5Db3VudCk7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxHcmlkXG4gICAgICAgICAgICAgIGNvbHVtbkNvdW50PXtjb2x1bW5Db3VudH1cbiAgICAgICAgICAgICAgY29sdW1uV2lkdGg9e2NvbHVtbldpZHRofVxuICAgICAgICAgICAgICByb3dDb3VudD17cm93Q291bnR9XG4gICAgICAgICAgICAgIHJvd0hlaWdodD17cm93SGVpZ2h0fVxuICAgICAgICAgICAgICB3aWR0aD17d2lkdGh9XG4gICAgICAgICAgICAgIGhlaWdodD17aGVpZ2h0fVxuICAgICAgICAgICAgICBpdGVtRGF0YT17eyAuLi5wcm9wcywgZ3V0dGVyLCBjb2x1bW5Db3VudCB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7Q2FyZFdyYXBwZXJ9XG4gICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgKTtcbiAgICAgICAgfX1cbiAgICAgIDwvQXV0b1NpemVyPlxuICAgIDwvQ2FyZEdyaWRDb250YWluZXI+XG4gICk7XG59O1xuXG5jb25zdCBQYWdpbmF0ZWRHcmlkID0gKHtcbiAgc2V0U2Nyb2xsQ29udGFpbmVyUmVmLFxuICBtZWRpYUl0ZW1zLFxuICBpc1NlbGVjdGVkRmlsZSxcbiAgb25Bc3NldENsaWNrLFxuICBjYXJkRHJhZnRUZXh0LFxuICBjYXJkV2lkdGgsXG4gIGNhcmRIZWlnaHQsXG4gIGNhcmRNYXJnaW4sXG4gIGlzUHJpdmF0ZSxcbiAgZGlzcGxheVVSTHMsXG4gIGxvYWREaXNwbGF5VVJMLFxuICBjYW5Mb2FkTW9yZSxcbiAgb25Mb2FkTW9yZSxcbiAgaXNQYWdpbmF0aW5nLFxuICBwYWdpbmF0aW5nTWVzc2FnZSxcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8Q2FyZEdyaWRDb250YWluZXIgcmVmPXtzZXRTY3JvbGxDb250YWluZXJSZWZ9PlxuICAgICAgPENhcmRHcmlkPlxuICAgICAgICB7bWVkaWFJdGVtcy5tYXAoZmlsZSA9PiAoXG4gICAgICAgICAgPE1lZGlhTGlicmFyeUNhcmRcbiAgICAgICAgICAgIGtleT17ZmlsZS5rZXl9XG4gICAgICAgICAgICBpc1NlbGVjdGVkPXtpc1NlbGVjdGVkRmlsZShmaWxlKX1cbiAgICAgICAgICAgIHRleHQ9e2ZpbGUubmFtZX1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQXNzZXRDbGljayhmaWxlKX1cbiAgICAgICAgICAgIGlzRHJhZnQ9e2ZpbGUuZHJhZnR9XG4gICAgICAgICAgICBkcmFmdFRleHQ9e2NhcmREcmFmdFRleHR9XG4gICAgICAgICAgICB3aWR0aD17Y2FyZFdpZHRofVxuICAgICAgICAgICAgaGVpZ2h0PXtjYXJkSGVpZ2h0fVxuICAgICAgICAgICAgbWFyZ2luPXtjYXJkTWFyZ2lufVxuICAgICAgICAgICAgaXNQcml2YXRlPXtpc1ByaXZhdGV9XG4gICAgICAgICAgICBkaXNwbGF5VVJMPXtkaXNwbGF5VVJMcy5nZXQoZmlsZS5pZCwgZmlsZS51cmwgPyBNYXAoeyB1cmw6IGZpbGUudXJsIH0pIDogTWFwKCkpfVxuICAgICAgICAgICAgbG9hZERpc3BsYXlVUkw9eygpID0+IGxvYWREaXNwbGF5VVJMKGZpbGUpfVxuICAgICAgICAgICAgdHlwZT17ZmlsZS50eXBlfVxuICAgICAgICAgICAgaXNWaWV3YWJsZUltYWdlPXtmaWxlLmlzVmlld2FibGVJbWFnZX1cbiAgICAgICAgICAvPlxuICAgICAgICApKX1cbiAgICAgICAgeyFjYW5Mb2FkTW9yZSA/IG51bGwgOiA8V2F5cG9pbnQgb25FbnRlcj17b25Mb2FkTW9yZX0gLz59XG4gICAgICA8L0NhcmRHcmlkPlxuICAgICAgeyFpc1BhZ2luYXRpbmcgPyBudWxsIDogKFxuICAgICAgICA8UGFnaW5hdGluZ01lc3NhZ2UgaXNQcml2YXRlPXtpc1ByaXZhdGV9PntwYWdpbmF0aW5nTWVzc2FnZX08L1BhZ2luYXRpbmdNZXNzYWdlPlxuICAgICAgKX1cbiAgICA8L0NhcmRHcmlkQ29udGFpbmVyPlxuICApO1xufTtcblxuY29uc3QgQ2FyZEdyaWRDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBvdmVyZmxvdy15OiBhdXRvO1xuICBvdmVyZmxvdy14OiBoaWRkZW47XG5gO1xuXG5jb25zdCBDYXJkR3JpZCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtd3JhcDogd3JhcDtcblxuICBtYXJnaW4tbGVmdDogLTEwcHg7XG4gIG1hcmdpbi1yaWdodDogLTEwcHg7XG5gO1xuXG5jb25zdCBQYWdpbmF0aW5nTWVzc2FnZSA9IHN0eWxlZC5oMWBcbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMuaXNQcml2YXRlICYmIGNvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuYDtcblxuY29uc3QgTWVkaWFMaWJyYXJ5Q2FyZEdyaWQgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHsgY2FuTG9hZE1vcmUsIGlzUGFnaW5hdGluZyB9ID0gcHJvcHM7XG4gIGlmIChjYW5Mb2FkTW9yZSB8fCBpc1BhZ2luYXRpbmcpIHtcbiAgICByZXR1cm4gPFBhZ2luYXRlZEdyaWQgey4uLnByb3BzfSAvPjtcbiAgfVxuICByZXR1cm4gPFZpcnR1YWxpemVkR3JpZCB7Li4ucHJvcHN9IC8+O1xufTtcblxuTWVkaWFMaWJyYXJ5Q2FyZEdyaWQucHJvcFR5cGVzID0ge1xuICBzZXRTY3JvbGxDb250YWluZXJSZWY6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG1lZGlhSXRlbXM6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBkaXNwbGF5VVJMOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgICBpZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAga2V5OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICBkcmFmdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgfSksXG4gICkuaXNSZXF1aXJlZCxcbiAgaXNTZWxlY3RlZEZpbGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uQXNzZXRDbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgY2FuTG9hZE1vcmU6IFByb3BUeXBlcy5ib29sLFxuICBvbkxvYWRNb3JlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBpc1BhZ2luYXRpbmc6IFByb3BUeXBlcy5ib29sLFxuICBwYWdpbmF0aW5nTWVzc2FnZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY2FyZERyYWZ0VGV4dDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBjYXJkV2lkdGg6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgY2FyZE1hcmdpbjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBsb2FkRGlzcGxheVVSTDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNQcml2YXRlOiBQcm9wVHlwZXMuYm9vbCxcbiAgZGlzcGxheVVSTHM6IFByb3BUeXBlcy5pbnN0YW5jZU9mKE1hcCkuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1lZGlhTGlicmFyeUNhcmRHcmlkO1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const PaginatingMessage = (0, _styledBase.default)("h1", {
  target: "e11970yf2",
  label: "PaginatingMessage"
})("color:", props => props.isPrivate && _netlifyCmsUiDefault.colors.textFieldBorder, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lZGlhTGlicmFyeS9NZWRpYUxpYnJhcnlDYXJkR3JpZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4Sm1DIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lZGlhTGlicmFyeS9NZWRpYUxpYnJhcnlDYXJkR3JpZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgV2F5cG9pbnQgfSBmcm9tICdyZWFjdC13YXlwb2ludCc7XG5pbXBvcnQgTWVkaWFMaWJyYXJ5Q2FyZCBmcm9tICcuL01lZGlhTGlicmFyeUNhcmQnO1xuaW1wb3J0IHsgTWFwIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gJ25ldGxpZnktY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IHsgRml4ZWRTaXplR3JpZCBhcyBHcmlkIH0gZnJvbSAncmVhY3Qtd2luZG93JztcbmltcG9ydCBBdXRvU2l6ZXIgZnJvbSAncmVhY3QtdmlydHVhbGl6ZWQtYXV0by1zaXplcic7XG5cbmNvbnN0IENhcmRXcmFwcGVyID0gcHJvcHMgPT4ge1xuICBjb25zdCB7XG4gICAgcm93SW5kZXgsXG4gICAgY29sdW1uSW5kZXgsXG4gICAgc3R5bGUsXG4gICAgZGF0YToge1xuICAgICAgbWVkaWFJdGVtcyxcbiAgICAgIGlzU2VsZWN0ZWRGaWxlLFxuICAgICAgb25Bc3NldENsaWNrLFxuICAgICAgY2FyZERyYWZ0VGV4dCxcbiAgICAgIGNhcmRXaWR0aCxcbiAgICAgIGNhcmRIZWlnaHQsXG4gICAgICBpc1ByaXZhdGUsXG4gICAgICBkaXNwbGF5VVJMcyxcbiAgICAgIGxvYWREaXNwbGF5VVJMLFxuICAgICAgY29sdW1uQ291bnQsXG4gICAgICBndXR0ZXIsXG4gICAgfSxcbiAgfSA9IHByb3BzO1xuICBjb25zdCBpbmRleCA9IHJvd0luZGV4ICogY29sdW1uQ291bnQgKyBjb2x1bW5JbmRleDtcbiAgaWYgKGluZGV4ID49IG1lZGlhSXRlbXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgZmlsZSA9IG1lZGlhSXRlbXNbaW5kZXhdO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgc3R5bGU9e3tcbiAgICAgICAgLi4uc3R5bGUsXG4gICAgICAgIGxlZnQ6IHN0eWxlLmxlZnQgKyBndXR0ZXIgKiBjb2x1bW5JbmRleCxcbiAgICAgICAgdG9wOiBzdHlsZS50b3AgKyBndXR0ZXIsXG4gICAgICAgIHdpZHRoOiBzdHlsZS53aWR0aCAtIGd1dHRlcixcbiAgICAgICAgaGVpZ2h0OiBzdHlsZS5oZWlnaHQgLSBndXR0ZXIsXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxNZWRpYUxpYnJhcnlDYXJkXG4gICAgICAgIGtleT17ZmlsZS5rZXl9XG4gICAgICAgIGlzU2VsZWN0ZWQ9e2lzU2VsZWN0ZWRGaWxlKGZpbGUpfVxuICAgICAgICB0ZXh0PXtmaWxlLm5hbWV9XG4gICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQXNzZXRDbGljayhmaWxlKX1cbiAgICAgICAgaXNEcmFmdD17ZmlsZS5kcmFmdH1cbiAgICAgICAgZHJhZnRUZXh0PXtjYXJkRHJhZnRUZXh0fVxuICAgICAgICB3aWR0aD17Y2FyZFdpZHRofVxuICAgICAgICBoZWlnaHQ9e2NhcmRIZWlnaHR9XG4gICAgICAgIG1hcmdpbj17JzBweCd9XG4gICAgICAgIGlzUHJpdmF0ZT17aXNQcml2YXRlfVxuICAgICAgICBkaXNwbGF5VVJMPXtkaXNwbGF5VVJMcy5nZXQoZmlsZS5pZCwgZmlsZS51cmwgPyBNYXAoeyB1cmw6IGZpbGUudXJsIH0pIDogTWFwKCkpfVxuICAgICAgICBsb2FkRGlzcGxheVVSTD17KCkgPT4gbG9hZERpc3BsYXlVUkwoZmlsZSl9XG4gICAgICAgIHR5cGU9e2ZpbGUudHlwZX1cbiAgICAgICAgaXNWaWV3YWJsZUltYWdlPXtmaWxlLmlzVmlld2FibGVJbWFnZX1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5jb25zdCBWaXJ0dWFsaXplZEdyaWQgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHsgbWVkaWFJdGVtcywgc2V0U2Nyb2xsQ29udGFpbmVyUmVmIH0gPSBwcm9wcztcblxuICByZXR1cm4gKFxuICAgIDxDYXJkR3JpZENvbnRhaW5lciByZWY9e3NldFNjcm9sbENvbnRhaW5lclJlZn0+XG4gICAgICA8QXV0b1NpemVyPlxuICAgICAgICB7KHsgaGVpZ2h0LCB3aWR0aCB9KSA9PiB7XG4gICAgICAgICAgY29uc3QgY2FyZFdpZHRoID0gcGFyc2VJbnQocHJvcHMuY2FyZFdpZHRoLCAxMCk7XG4gICAgICAgICAgY29uc3QgY2FyZEhlaWdodCA9IHBhcnNlSW50KHByb3BzLmNhcmRIZWlnaHQsIDEwKTtcbiAgICAgICAgICBjb25zdCBndXR0ZXIgPSBwYXJzZUludChwcm9wcy5jYXJkTWFyZ2luLCAxMCk7XG4gICAgICAgICAgY29uc3QgY29sdW1uV2lkdGggPSBjYXJkV2lkdGggKyBndXR0ZXI7XG4gICAgICAgICAgY29uc3Qgcm93SGVpZ2h0ID0gY2FyZEhlaWdodCArIGd1dHRlcjtcbiAgICAgICAgICBjb25zdCBjb2x1bW5Db3VudCA9IE1hdGguZmxvb3Iod2lkdGggLyBjb2x1bW5XaWR0aCk7XG4gICAgICAgICAgY29uc3Qgcm93Q291bnQgPSBNYXRoLmNlaWwobWVkaWFJdGVtcy5sZW5ndGggLyBjb2x1bW5Db3VudCk7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxHcmlkXG4gICAgICAgICAgICAgIGNvbHVtbkNvdW50PXtjb2x1bW5Db3VudH1cbiAgICAgICAgICAgICAgY29sdW1uV2lkdGg9e2NvbHVtbldpZHRofVxuICAgICAgICAgICAgICByb3dDb3VudD17cm93Q291bnR9XG4gICAgICAgICAgICAgIHJvd0hlaWdodD17cm93SGVpZ2h0fVxuICAgICAgICAgICAgICB3aWR0aD17d2lkdGh9XG4gICAgICAgICAgICAgIGhlaWdodD17aGVpZ2h0fVxuICAgICAgICAgICAgICBpdGVtRGF0YT17eyAuLi5wcm9wcywgZ3V0dGVyLCBjb2x1bW5Db3VudCB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7Q2FyZFdyYXBwZXJ9XG4gICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgKTtcbiAgICAgICAgfX1cbiAgICAgIDwvQXV0b1NpemVyPlxuICAgIDwvQ2FyZEdyaWRDb250YWluZXI+XG4gICk7XG59O1xuXG5jb25zdCBQYWdpbmF0ZWRHcmlkID0gKHtcbiAgc2V0U2Nyb2xsQ29udGFpbmVyUmVmLFxuICBtZWRpYUl0ZW1zLFxuICBpc1NlbGVjdGVkRmlsZSxcbiAgb25Bc3NldENsaWNrLFxuICBjYXJkRHJhZnRUZXh0LFxuICBjYXJkV2lkdGgsXG4gIGNhcmRIZWlnaHQsXG4gIGNhcmRNYXJnaW4sXG4gIGlzUHJpdmF0ZSxcbiAgZGlzcGxheVVSTHMsXG4gIGxvYWREaXNwbGF5VVJMLFxuICBjYW5Mb2FkTW9yZSxcbiAgb25Mb2FkTW9yZSxcbiAgaXNQYWdpbmF0aW5nLFxuICBwYWdpbmF0aW5nTWVzc2FnZSxcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8Q2FyZEdyaWRDb250YWluZXIgcmVmPXtzZXRTY3JvbGxDb250YWluZXJSZWZ9PlxuICAgICAgPENhcmRHcmlkPlxuICAgICAgICB7bWVkaWFJdGVtcy5tYXAoZmlsZSA9PiAoXG4gICAgICAgICAgPE1lZGlhTGlicmFyeUNhcmRcbiAgICAgICAgICAgIGtleT17ZmlsZS5rZXl9XG4gICAgICAgICAgICBpc1NlbGVjdGVkPXtpc1NlbGVjdGVkRmlsZShmaWxlKX1cbiAgICAgICAgICAgIHRleHQ9e2ZpbGUubmFtZX1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQXNzZXRDbGljayhmaWxlKX1cbiAgICAgICAgICAgIGlzRHJhZnQ9e2ZpbGUuZHJhZnR9XG4gICAgICAgICAgICBkcmFmdFRleHQ9e2NhcmREcmFmdFRleHR9XG4gICAgICAgICAgICB3aWR0aD17Y2FyZFdpZHRofVxuICAgICAgICAgICAgaGVpZ2h0PXtjYXJkSGVpZ2h0fVxuICAgICAgICAgICAgbWFyZ2luPXtjYXJkTWFyZ2lufVxuICAgICAgICAgICAgaXNQcml2YXRlPXtpc1ByaXZhdGV9XG4gICAgICAgICAgICBkaXNwbGF5VVJMPXtkaXNwbGF5VVJMcy5nZXQoZmlsZS5pZCwgZmlsZS51cmwgPyBNYXAoeyB1cmw6IGZpbGUudXJsIH0pIDogTWFwKCkpfVxuICAgICAgICAgICAgbG9hZERpc3BsYXlVUkw9eygpID0+IGxvYWREaXNwbGF5VVJMKGZpbGUpfVxuICAgICAgICAgICAgdHlwZT17ZmlsZS50eXBlfVxuICAgICAgICAgICAgaXNWaWV3YWJsZUltYWdlPXtmaWxlLmlzVmlld2FibGVJbWFnZX1cbiAgICAgICAgICAvPlxuICAgICAgICApKX1cbiAgICAgICAgeyFjYW5Mb2FkTW9yZSA/IG51bGwgOiA8V2F5cG9pbnQgb25FbnRlcj17b25Mb2FkTW9yZX0gLz59XG4gICAgICA8L0NhcmRHcmlkPlxuICAgICAgeyFpc1BhZ2luYXRpbmcgPyBudWxsIDogKFxuICAgICAgICA8UGFnaW5hdGluZ01lc3NhZ2UgaXNQcml2YXRlPXtpc1ByaXZhdGV9PntwYWdpbmF0aW5nTWVzc2FnZX08L1BhZ2luYXRpbmdNZXNzYWdlPlxuICAgICAgKX1cbiAgICA8L0NhcmRHcmlkQ29udGFpbmVyPlxuICApO1xufTtcblxuY29uc3QgQ2FyZEdyaWRDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBvdmVyZmxvdy15OiBhdXRvO1xuICBvdmVyZmxvdy14OiBoaWRkZW47XG5gO1xuXG5jb25zdCBDYXJkR3JpZCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtd3JhcDogd3JhcDtcblxuICBtYXJnaW4tbGVmdDogLTEwcHg7XG4gIG1hcmdpbi1yaWdodDogLTEwcHg7XG5gO1xuXG5jb25zdCBQYWdpbmF0aW5nTWVzc2FnZSA9IHN0eWxlZC5oMWBcbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMuaXNQcml2YXRlICYmIGNvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuYDtcblxuY29uc3QgTWVkaWFMaWJyYXJ5Q2FyZEdyaWQgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHsgY2FuTG9hZE1vcmUsIGlzUGFnaW5hdGluZyB9ID0gcHJvcHM7XG4gIGlmIChjYW5Mb2FkTW9yZSB8fCBpc1BhZ2luYXRpbmcpIHtcbiAgICByZXR1cm4gPFBhZ2luYXRlZEdyaWQgey4uLnByb3BzfSAvPjtcbiAgfVxuICByZXR1cm4gPFZpcnR1YWxpemVkR3JpZCB7Li4ucHJvcHN9IC8+O1xufTtcblxuTWVkaWFMaWJyYXJ5Q2FyZEdyaWQucHJvcFR5cGVzID0ge1xuICBzZXRTY3JvbGxDb250YWluZXJSZWY6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG1lZGlhSXRlbXM6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBkaXNwbGF5VVJMOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgICBpZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAga2V5OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICBkcmFmdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgfSksXG4gICkuaXNSZXF1aXJlZCxcbiAgaXNTZWxlY3RlZEZpbGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uQXNzZXRDbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgY2FuTG9hZE1vcmU6IFByb3BUeXBlcy5ib29sLFxuICBvbkxvYWRNb3JlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBpc1BhZ2luYXRpbmc6IFByb3BUeXBlcy5ib29sLFxuICBwYWdpbmF0aW5nTWVzc2FnZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY2FyZERyYWZ0VGV4dDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBjYXJkV2lkdGg6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgY2FyZE1hcmdpbjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBsb2FkRGlzcGxheVVSTDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNQcml2YXRlOiBQcm9wVHlwZXMuYm9vbCxcbiAgZGlzcGxheVVSTHM6IFByb3BUeXBlcy5pbnN0YW5jZU9mKE1hcCkuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1lZGlhTGlicmFyeUNhcmRHcmlkO1xuIl19 */"));

const MediaLibraryCardGrid = props => {
  const {
    canLoadMore,
    isPaginating
  } = props;

  if (canLoadMore || isPaginating) {
    return (0, _core.jsx)(PaginatedGrid, props);
  }

  return (0, _core.jsx)(VirtualizedGrid, props);
};

MediaLibraryCardGrid.propTypes = {
  setScrollContainerRef: _propTypes.default.func.isRequired,
  mediaItems: _propTypes.default.arrayOf(_propTypes.default.shape({
    displayURL: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),
    id: _propTypes.default.string.isRequired,
    key: _propTypes.default.string.isRequired,
    name: _propTypes.default.string.isRequired,
    type: _propTypes.default.string.isRequired,
    draft: _propTypes.default.bool
  })).isRequired,
  isSelectedFile: _propTypes.default.func.isRequired,
  onAssetClick: _propTypes.default.func.isRequired,
  canLoadMore: _propTypes.default.bool,
  onLoadMore: _propTypes.default.func.isRequired,
  isPaginating: _propTypes.default.bool,
  paginatingMessage: _propTypes.default.string,
  cardDraftText: _propTypes.default.string.isRequired,
  cardWidth: _propTypes.default.string.isRequired,
  cardMargin: _propTypes.default.string.isRequired,
  loadDisplayURL: _propTypes.default.func.isRequired,
  isPrivate: _propTypes.default.bool,
  displayURLs: _propTypes.default.instanceOf(_immutable.Map).isRequired
};
var _default = MediaLibraryCardGrid;
exports.default = _default;